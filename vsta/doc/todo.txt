copyin/copyout--put in locore.s, use user's segment
	-- Worse than I thought.  Bug in i386 allows ring 0 code to write
	to a read-only mapping.  So COW is a bust when one would expect
	it to work for a copyout.  Walk translations manually?  Bleh.
	Use copy-on-reference for i386.

X TLB staleness--how split HAT/portable?  Assume TLB shootdown is
X relatively cheap and if not assume HAT will do the gyrations
X necessary?
	-- Yes

X Should HAT update ref/mod bits in c_flags?
	-- Moved this to pp_flags.  It's done above the HAT.

X Make sure users can't send M_RESVD messages
	-- Done.  Allow M_TIME as I don't feel like renumbering it now.

X How hand msg_err() answers around?
	-- In the m_err field in a sysmsg, which is copied into
	 the thread's error field when in the thread's context.

X Make msg_send() and msg_connect() handle the case of the port dying
X with their stuff queued.  Does a lock on the port give a guarantee
X that any transition to state P_DEAD will guarantee an answer to their
X queued message first?
	-- client handles sysmsg; server handles segments received.
	 Server gets away from client by zeroing the p_port field.
	 Server enumerates clients through his circular linked list
	 of portrefs.

X Have to have server use portref's segref array--multiple outstanding
X requests on a server allows several requests worth of mapped data
X to be present.
	-- The segrefs which are currently attached is kept in a per-
	 *thread* variable.  A thread must either finish with its use
	 of the data before its next receipt, or must copy it to
	 someplace more permanent.

X Change the psop_writeslot so that the asynch flag is instead a pointer
X to a function--NULL means synchronous.  Then pageout pushes can use
X a routine to free/clean the page, exit pushes can simply free, and
X so forth.
	-- Done.  iodone_free() and iodone_unlock() will do free/unlock
	or unlock on completion.

X Add a FS_ABSWRITE and FS_ABSREAD to combine a seek and a write.  Needed
X for many things, including swap I/O's.
	-- Added for floppy driver.  Must ensure handled for disk drivers
	when they're written.  Still nice to add to all handlers that
	offer seek.

X Add the second argument to msg.c and msgcon.c handling.
	-- Done.

X Add optimization to add the cache translation *each time* someone faults
X a slot translation in.  Currently we only add when going from !PP_V->PP_V;
X this works, but will guarantee that the page must be brought in from
X its server if the cache view is ever paged out.  Should be done by keeping
X a flag with the perpage, and clearing it when these cache translations
X are deleted.
	-- Bogus concept.  We allow caching by letting pages reside under
	a pset with a ref count of 0.  The pageout daemon is reponsible
	for reaping these as memory situations demand.

X Add machinery to page stealer to raid cache pviews who are the last
X reference to the pset.  We need them as we don't tag the page otherwise,
X but we should clear them out over time.  Note that the pages can be
X stolen just fine; it's the pview itself that we need to reclaim at
X some point.
	-- There is no such thing, though I still need to add something
	to lazily keep psets around, even though they're not currently
	mapped.  Trick is that this has to be unified with a mechanism
	for mapping a pset to a given server and inode number.

Add code to manage T_KERN bit of thread flags

Add code to qio_msg_send to handle case of a "copyout".  A bcopy()
to ptov(pfn) should suffice?

X Add handling for M_DUP messaging.  How correlate back to new portref
X being created?
	-- Done.  The p_msg field of the portref tells us that it's an
	M_DUP, and it tells us (in m_arg) what's being created.

Convert m_connect() (and others?) to use kernmsg_send().  I think I
can make the code quite a bit smaller.

X Add code to put a proc on the "cheated" queue.
	-- Done.  Also have to keep a CPU hog counter, as otherwise
	a CPU hog gets bumped once by a "cheated" process, and becomes
	a "cheated" process itself.

X Should "allprocs" be doubly-linked?
	-- Done.  Useful for at least one flavor of pstat() to keep
	marker for place in proc list.  Also gives the obvious benefit
	of an O(1) removal on exit().

Once up, should invalidate all vaddr's above heap

X Clean up scheduling node on exit
	-- Done.  "memleak" function of kdb is your friend....

X Implement mmap()
	-- Done.

X In fork() the portref array is mutexed across the entire dup_port()
X 	using p_sema from the proc structure.  This is at least overkill,
X 	perhaps worse.  The code should use find_portref(), scanning the
X 	old portref array and attempting to get portrefs through the
X 	usual interface.  This shares more code, and considerably narrows
X 	the time for which the proc sema must be held.
	-- Done.  Became acute with pstat() interlocking against such
	processes.  Now is released as we step along.

XAdd a flag for pviews to tell if they should be copied/inherited on
X	a fork().  Make sure transient pviews from msg_receive()'s
X	are *not* inherited.
	-- I think the SHARED flag (in the pset?) does the job.

XRethink struct core's c_long vs. c_atl fields.  They are mutually
X	exclusive in use except for cases of M_CONNECT messages,
X	where the user temporarily maps the permissions of the
X	connecting process.  Perhaps it would be worth adding some
X	code to handle this differently... would it be worth it
X	to regain 4 bytes per 4K (0.1%) overhead?
	-- Revamped.  The attach lists of pviews have moved up to
	the perpage struct--c_atl only indicates the primary pset.
	This keeps the temporary user mapping of a memory pset from
	trashing our malloc state.

Add check to enable_dma() for conflict in DMA channels

Check abort in wd/rw.c to see if we do the right thing when we're
	DMA'ing into the would-be-aborters address space.

XCheck whether the right nodes get flagged dirty when we create
X	a node within a dir.  Does the dir node need to be flagged?
X	(DOSFS)
	I believe this is all working OK now.

Xrmdir seems hosed.  We need to throw away the clusters under the file,
X	but we hash off this cluster number for the case of directories.
X	I also don't seem to be updating the node's length field before
X	letting deref_node() clear it.  (DOSFS)
	Fixed.  Fiddled with ordering of what gets cleared where.

Caching of executables is indefinite.  Need two things: first, a way
	for the page stealer to tear down & reclaim stuff which hasn't
	been used for a while.  Second, need a way for a server to
	get rid of a cache entry for a file being removed.
	-- 2nd part done; DOS initiates an unhash and returns EAGAIN.
	unlink() will try 2 times, with a 0.1 sec sleep in between.
	First part is nasty, since kernel would need to close connection
	with server.  Bum server could hang up the kernel.

X Some problems with mutexing of semaphores and treatment of priorities.
X 	I don't think we're honoring PRIHI right now.  Also, I think
X 	p_sema needs to take the runq lock sooner, to provide mutexing
X 	between sleeping and being handed an event.
	-- PRIHI does the right thing now.  I think semaphores are taking
	lock at the right time.

Definitely a problem with free_proc() letting go of the root of our
	page table before we're off it.  idle_stack() needs to get onto
	its own root page table--the one we use to boot will suffice,
	I think.  idle_stack(), once fixed, needs to be called before
	we ever call free_proc().
	*** Hmm, further thoughts.  If we had an idle_vas(), we could
	safely abandon a per-process address space without hitting
	the tedium of losing the stack (and thus all local variables).
	The kernel view is stable, so we could idle_vas(), free_proc(),
	and proceed at our leisure.
	Definitely steal that initial root page table--it should be
	nearly right already.

X vm_fault.c's description of fault handling is out of date.
X	Done.

XDOSFS can't uncache an executable after it's been renamed.  Problem appears
X	to be that "inode number" changes after rename, and thus can't
X	hunt down the right node to clear.
	-- Fixed.  inode number can simply be node address; more efficient,
	and keeps inum from changing due to rename.

XVM can't reclaim cached pages which have no current attach list entry.
X	We currently allow valid pset slots with ref count of 0.  Should
X	probably have pset_fod type psets keep a cache pseudo-vas and then
X	free memory under a pset when ref count goes to 0.
	-- Fixed.  Caching is done by always leaving a reference around
	  to a pseudo-pview under the pset.  Pageout can flush this
	  reference out just like others, and a ->0 ref frees the page.

X There are a couple more pset operations which should be vectors instead
X	of special cases in a switch statement.
	-- Done.  I think all the appropriate ones are vectors now.

XSystem call interruption via t_qsav is screwed.  *Any* semaphore op--for
X	page fault, system call, whatever--can longjmp back out through
X	this.  Need to set it up so only system calls can have this
X	happen.
	-- Fixed.  Got rid of t_qsav entirely.  Sometimes you carry
	assumptions from past OS's even when it really doesn't make
	a whole lot of sense.

Need to set up message operation interruption so even a completely
	hosed server can't hang a client.  Client should be able to
	interrupt operation without blocking ; client should be able
	to disconnect without blocking.  DMA is a special case.

DOS file ID is OK for purposes of caching executables, but hoses things
	like "du" which want to know if a particular file is a link to
	one which has already been examined.  Well no, you can't have
	hard links under DOS, but you still need to return a unique
	per-file ID.  Blk # of first cluster would be OK, except that
	zero-length files don't have any blocks, so what ID do they
	get?  We used to use the cluster # of the containing dir OR'ed
	in with the directory slot, but this caused the ID to change
	on a rename.  It was then impossible to unhash a renamed a.out
	which was kernel cached.
