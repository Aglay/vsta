.TH MMAP 2
.SH NAME
mmap \- manipulate process virtual address space
.SH SYNOPSIS
.B #include <sys/mman.h>
.br
.B int mmap(void *vaddr, ulong len, int prot, int flags, int fd, ulong offset);
.SH DESCRIPTION
The
.I mmap()
system call manipulates the address space of a process.  In general,
.I len
bytes of mapped space is created, and is mapped in at the
specified
.I vaddr.
The
.I vaddr
can be (void *)0, and the OS will choose an address.
.I MAP_FIXED,
specified below, also affects address assignment.
.PP
The protection of the mapped space is controlled by
the
.I prot
parameters, with the following bits defined:
.RS
.nf
.B #define PROT_EXEC (0x01)
.B #define PROT_READ (0x02)
.B #define PROT_WRITE (0x04)
.fi
.RE
.PP
.I flags
controls the contents of the memory space created by
.I mmap(),
and may contain the following options:
.RS
.nf
.B #define MAP_ANON (0x01)
.B #define MAP_FILE (0x02)
.B #define MAP_FIXED (0x04)
.B #define MAP_PRIVATE (0x08)
.B #define MAP_SHARED (0x10)
.B #define MAP_PHYS (0x20)
.fi
.RE
.PP
.I MAP_ANON
specifies "anonymous" memory; this is memory which is filled on
demand with an initial contents of zero.
.PP
.I MAP_FILE
creates memory whose contents is initially filled from the
file specified by the
.I fd
parameter.  The contents is filled from
.I offset
bytes into the file.
.PP
.I MAP_FIXED
requires that the new memory object be mapped exactly at the
address specified by
.I vaddr;
otherwise, the request fails.
.PP
.I MAP_PRIVATE
creates a memory objects in which any changes to the initial
contents are not reflected in the object as viewed in any
other address space.
.PP
.I MAP_SHARED
is the opposite of
.I MAP_PRIVATE;
this option is not supported for writable memory segments in VSTa.
.PP
.I MAP_PHYS
creates a view into physical memory; it is generally used
by device drivers.  In this case,
.I vaddr
is instead the physical address to map.  The attached memory
is always mapped in at an OS-chosen address.
