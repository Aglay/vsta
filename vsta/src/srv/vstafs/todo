X Make sure directory entries are not honored in EXTSIZ-allocated
X 	storage at end of dir file.

X Make sure on file expansion that we don't read in the new space
X 	from disk.

X Add a "first sector dirty" flag so we don't have to flush the first
X 	full extent just to update fs_file
X 	In fact, add interface of dirtying a range.  Allows for a
X 	bitmap in the future.

X Add a "only first sector is valid" flag, so we don't have to read
X 	the whole 64K of a file just to do a stat--just read the
X 	1st sector which holds all the file information.

Directory block allocation is stupid--it will always be maximally
	fragmented.  Perhaps use a power-of-two progression when
	allocating extents?  Certainly can't use the default file
	allocation algorithm--the usage pattern is too different.

X Ensure deletion of a directory can't happen unless it's empty.

Directory rename.  Does it work?

X fsck--when find "lost" blocks need to add back to free list

Buffers shouldn't be moving on resize.  We should use a 64K-sized
	buffer and just munmap() (or something) the trailing pages.

Flushing as you go is wasteful.  We need a "transaction" data structure
	so we can explicitly order the writes needed to complete a
	filesystem operation safely.

The "transaction" should be tagged under the open file.  This allows
	fsync() to be turned into a "commit" of the transaction.

A file which has been opened chmod/write will results in a buffer
	cache flush when it closes.  We should add a flag to indicate
	whether the file has been modified in some way, so that
	passive stat's of the file (which may have ACC_CHMOD, but
	they don't use it) don't churn the buffer cache for no reason.

We should flag DIRTY0 distinct from having the whole buffer dirty.
	That way, as later extents in the file get populated we only
	have to go back and update the file header, not the entire
	extent which holds the file header.
